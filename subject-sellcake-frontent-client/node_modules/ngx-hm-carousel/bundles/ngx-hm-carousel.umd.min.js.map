{"version":3,"sources":["ng://ngx-hm-carousel/lib/ngx-hm-carousel-dynamic.directive.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel-item.directive.ts","ng://ngx-hm-carousel/lib/rxjs.observable.resize.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel.component.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel.module.ts"],"names":["NgxHmCarouselDynamicDirective","_view","_template","this","compelete","clear","Object","defineProperty","prototype","value","nextI","prevI","index","length","createEmbeddedView","ngOnInit","Directive","args","selector","ViewContainerRef","TemplateRef","Input","NgxHmCarouselItemDirective","resizeObservable","elm","cb","time","elmObserve$","Observable","create","observer","ResizeObserver","entries","obs","next","observe","pipe","debounceTime","tap","finalize","unobserve","disconnect","NgxHmCarouselComponent","platformId","_document","_renderer","_zone","_cd","_this","aniTime","aniClass","aniClassAuto","align","notDrag","mourseEnable","delay","direction","scrollNum","isDragMany","breakpoint","leaveObs$","merge","fromEvent","e","grabbing","stopPropagation","preventDefault","isFromAuto","isAutoNum","mouseOnContainer","alignDistance","elmWidth","infiniteElmRefs","restart","BehaviorSubject","speedChange","stopEvent","Subject","destroy$","_porgressWidth","_currentIndex","_showNum","_autoplay","_infinite","_tmpInfinite","_grabbing","panCount","_disableDrag","hasInitWriteValue","onChange","_","onTouched","rootElm","destoryHammer","hammer","bindHammer","forEach","ref","addStyle","rootNodes","visibility","runLoop","runOutsideAngular","setViewWidth","reSetAlignDistance","isPlatformBrowser","elms","progressWidth","doNextSub$","doNext","subscribe","unsubscribe","infinite","currentIndex","itemElms","autoplay","callRestart","drawView","run","detectChanges","progressElm","undefined","setStyle","progressContainerElm","children","addClass","containerElm","removeClass","addIndex","getBoundingClientRect","width","ngAfterViewInit","container","nativeElement","init","forkJoin","bindClick","changes","setTimeout","destroy","removeInfiniteElm","containerResize","takeUntil","ngOnDestroy","writeValue","registerOnChange","fn","registerOnTouched","initVariable","disableDrag","addInfiniteElm","i","showNum","infiniteContainer","contentContent","$implicit","data","position","transform","elm2","right","top","push","a","detach","toArray","map","x","startEvent","asObservable","filter","switchMap","timer","runProgress","rootElmWidth","isInit","getAutoNum","containerElmWidth","hm","Hammer","get","set","DIRECTION_HORIZONTAL","on","lengthOne","removeContainerTransition","type","stop","outOfBound","deltaX","left","Math","abs","moveNum","ceil","prevIndex","nextIndex","maxRightIndex","btnNext","btnPrev","of","isAnimation","infiniteHandler","state_1","isFromAuto_1","saveTimeOut","speed","betweenTime","howTimes","everyIncrease","interval","t","bufferCount","round","curr_width","now","find","b","number","floor","style","keys","key","Component","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","changeDetection","ChangeDetectionStrategy","OnPush","decorators","Inject","PLATFORM_ID","DOCUMENT","Renderer2","NgZone","ChangeDetectorRef","ViewChild","ContentChildren","read","ElementRef","ContentChild","NgxHmCarouselModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngxHmCarouselDynamic]'\n})\nexport class NgxHmCarouselDynamicDirective implements OnInit {\n\n  @Input('ngxHmCarouselDynamic') index: number;\n  @Input('ngxHmCarouselDynamicLength') length: number;\n  @Input('ngxHmCarouselDynamicIndex')\n\n  set currentI(value: number) {\n    if (!this.compelete) {\n\n      const nextI = value + 1;\n      const prevI = value - 1;\n\n      if (\n        this.index === 0 ||\n        this.index === this.length - 1 ||\n        this.index === nextI ||\n        this.index === prevI ||\n        this.index === value) {\n        this._view.createEmbeddedView(this._template);\n        this.compelete = true;\n      }\n    }\n  }\n\n  private compelete = false;\n  constructor(\n    private _view: ViewContainerRef,\n    private _template: TemplateRef<any>) {\n    this._view.clear();\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[ngx-hm-carousel-item]'\n})\nexport class NgxHmCarouselItemDirective {\n\n  constructor() { }\n\n}\n","import ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Subscriber } from 'rxjs';\nimport { debounceTime, tap, finalize } from 'rxjs/operators';\n\n/**\n * An observable creator for element resize.\n * @param elm the watch element.\n * @param cb when resize complete, call back function.\n * @param time resize emit time, default is 200\n */\nexport function resizeObservable(elm: HTMLElement, cb: () => void, time = 200): Observable<any> {\n  let elmObserve$: ResizeObserver;\n  return Observable.create((observer: Subscriber<any>) => {\n    elmObserve$ = new ResizeObserver((entries, obs) => {\n      observer.next(elmObserve$);\n    });\n    elmObserve$.observe(elm);\n  }).pipe(\n    debounceTime(time),\n    tap(() => {\n      cb();\n    }),\n    finalize(() => {\n      elmObserve$.unobserve(elm);\n      elmObserve$.disconnect();\n    })\n  );\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n  QueryList,\n  Renderer2,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject, forkJoin, fromEvent, interval, merge, Observable, of, Subject, Subscription, timer } from 'rxjs';\nimport { bufferCount, switchMap, takeUntil, tap, filter } from 'rxjs/operators';\n\nimport { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';\nimport { resizeObservable } from './rxjs.observable.resize';\nimport { NgxHmCarouselBreakPointUp } from './ngx-hm-carousel.model';\nimport { DOCUMENT } from '@angular/common';\n\n// if the pane is paned .15, switch to the next pane.\nconst PANBOUNDARY = 0.15;\n\n@Component({\n  selector: 'ngx-hm-carousel',\n  templateUrl: './ngx-hm-carousel.component.html',\n  styleUrls: ['./ngx-hm-carousel.component.scss'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgxHmCarouselComponent),\n    multi: true\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxHmCarouselComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\n  @ViewChild('containerElm') container: ElementRef;\n  @ViewChild('prev') btnPrev: ElementRef;\n  @ViewChild('next') btnNext: ElementRef;\n  @ViewChild('progress') progressContainerElm: ElementRef;\n  // get all item elms\n  @ContentChildren(NgxHmCarouselItemDirective, { read: ElementRef }) itemElms: QueryList<ElementRef>;\n  @ContentChild('carouselPrev') contentPrev: TemplateRef<any>;\n  @ContentChild('carouselNext') contentNext: TemplateRef<any>;\n  @ContentChild('carouselDot') dotElm: TemplateRef<any>;\n  @ContentChild('carouselProgress') progressElm: TemplateRef<any>;\n\n  @ContentChild('infiniteContainer', { read: ViewContainerRef }) infiniteContainer: ViewContainerRef;\n  @ContentChild('carouselContent') contentContent: TemplateRef<any>;\n\n  @Input() data: any[];\n  @Input() aniTime = 400;\n  @Input() aniClass = 'transition';\n  @Input() aniClassAuto = this.aniClass;\n\n  // this default autoplay animation is same as aniClass\n  @Input() align: 'left' | 'center' | 'right' = 'center';\n  @Input('not-follow-pan') notDrag = false;\n  @Input('mourse-enable') mourseEnable = false;\n  @Input('between-delay') delay = 8000;\n  @Input('autoplay-direction') direction: 'left' | 'right' = 'right';\n  @Input('scroll-num') scrollNum = 1;\n  @Input('drag-many') isDragMany = false;\n\n  @Input() breakpoint: NgxHmCarouselBreakPointUp[] = [];\n\n  @Input('disable-drag')\n  get disableDrag() {\n    return this._disableDrag;\n  }\n  set disableDrag(value) {\n    if (this.rootElm) {\n      if (this._disableDrag !== value) {\n        if (value) {\n          this.destoryHammer();\n        } else {\n          this.hammer = this.bindHammer();\n        }\n      }\n    }\n    this._disableDrag = value;\n  }\n\n  @Input('infinite')\n  get infinite() { return this._infinite; }\n  set infinite(value) {\n    this._infinite = value;\n\n    this.infiniteElmRefs.forEach((ref) => {\n      this.addStyle(ref.rootNodes[0], {\n        visibility: this.runLoop ? 'visible' : 'hidden'\n      });\n    });\n  }\n\n  @Input('autoplay-speed')\n  get speed() { return this.speedChange.value; }\n  set speed(value) {\n    this._zone.runOutsideAngular(() => {\n      this.speedChange.next(value);\n    });\n  }\n\n  @Input('show-num')\n  get showNum() { return this._showNum; }\n  set showNum(value: number | 'auto') {\n    if (value === 'auto') {\n      this.isAutoNum = true;\n    } else {\n      this._showNum = +value;\n      if (this.rootElm) {\n        this.setViewWidth();\n        this.reSetAlignDistance();\n      }\n    }\n  }\n\n  @Input('autoplay')\n  get autoplay() { return this._autoplay; }\n  set autoplay(value) {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.elms) {\n        this.progressWidth = 0;\n        if (value) {\n          this._zone.runOutsideAngular(() => {\n            this.doNextSub$ = this.doNext.subscribe();\n          });\n        } else {\n          if (this.doNextSub$) { this.doNextSub$.unsubscribe(); }\n        }\n      }\n    }\n    this._autoplay = value;\n    // if set autoplay, then the infinite is true\n    if (value) {\n      this._tmpInfinite = this.infinite;\n      this.infinite = true;\n    } else {\n      this.infinite = this._tmpInfinite;\n    }\n  }\n\n  get currentIndex() { return this._currentIndex; }\n  set currentIndex(value) {\n    // if now index if not equale to save index, do someting\n    if (this.currentIndex !== value) {\n\n      // if the value is not contain with the boundary not handler\n      if (!this.runLoop && !(0 <= value && value <= this.itemElms.length - 1)) {\n        return;\n      }\n      this._currentIndex = value;\n      if (this.elms) {\n        if (this.autoplay && !this.isFromAuto) {\n\n          this._zone.runOutsideAngular(() => {\n            this.stopEvent.next();\n            this.callRestart();\n          });\n        }\n        this.drawView(this.currentIndex, this.hasInitWriteValue);\n        if (this.isDragMany) {\n          this.hasInitWriteValue = true;\n        }\n      }\n      if (0 <= this.currentIndex && this.currentIndex <= this.itemElms.length - 1) {\n        this._zone.run(() => {\n          this.onChange(this.currentIndex);\n          this._cd.detectChanges();\n        });\n      }\n    }\n    this.isFromAuto = false;\n  }\n\n  get progressWidth() { return this._porgressWidth; }\n  set progressWidth(value) {\n    if (this.progressElm !== undefined && this.autoplay) {\n      this._porgressWidth = value;\n      this._renderer.setStyle(\n        (<HTMLElement>this.progressContainerElm.nativeElement).children[0],\n        'width',\n        `${this.progressWidth}%`\n      );\n    }\n  }\n\n  get grabbing() { return this._grabbing; }\n  set grabbing(value: boolean) {\n    if (this._grabbing !== value) {\n      // console.log(value);\n      this._zone.run(() => {\n        this._grabbing = value;\n        if (value) {\n          this._renderer.addClass(this.containerElm, 'grabbing');\n        } else {\n          this.panCount = 0;\n          this.callRestart();\n          this._renderer.removeClass(this.containerElm, 'grabbing');\n        }\n        this._cd.detectChanges();\n      });\n    }\n  }\n\n  // using for check mouse or touchend\n  leaveObs$ = merge(\n    fromEvent(this._document, 'mouseup'),\n    fromEvent(this._document, 'touchend')\n  ).pipe(\n    tap((e: Event) => {\n      this.grabbing = false;\n      e.stopPropagation();\n      e.preventDefault();\n    })\n  );\n\n  private set left(value: number) {\n\n    if (isPlatformBrowser(this.platformId)) {\n      this._renderer.setStyle(this.containerElm, 'transform', `translateX(${value}px)`);\n    } else {\n      this._renderer.setStyle(this.containerElm, 'transform', `translateX(${value}%)`);\n    }\n  }\n\n  private get maxRightIndex() {\n    let addIndex = 0;\n    switch (this.align) {\n      case 'left':\n        addIndex = 0;\n        break;\n      case 'center':\n        addIndex = <number>this.showNum - 1;\n        break;\n      case 'right':\n        addIndex = <number>this.showNum - 1;\n        break;\n    }\n    return ((this.itemElms.length - 1) - this._showNum + 1) + addIndex;\n  }\n\n  private get runLoop() { return this.autoplay || this.infinite; }\n  private get lengthOne() { return this.itemElms.length === 1; }\n\n  private get rootElmWidth() {\n    return (isPlatformBrowser(this.platformId) ? this.rootElm.getBoundingClientRect().width : 100);\n  }\n\n  private set containerElmWidth(value) {\n    this.setStyle(this.containerElm, 'width', value);\n  }\n\n  private isFromAuto = true;\n  private isAutoNum = false;\n  private mouseOnContainer = false;\n  private alignDistance = 0;\n  private elmWidth = 0;\n\n  private rootElm: HTMLElement;\n  private containerElm: HTMLElement;\n\n  private elms: Array<HTMLElement>;\n  private infiniteElmRefs: Array<EmbeddedViewRef<any>> = [];\n\n  private hammer: HammerManager;\n\n  private saveTimeOut: Subscription;\n  private doNextSub$: Subscription;\n  private doNext: Observable<any>;\n\n  private restart = new BehaviorSubject<any>(null);\n  private speedChange = new BehaviorSubject(5000);\n  private stopEvent = new Subject<any>();\n  private destroy$ = new Subject<any>();\n\n  private _porgressWidth = 0;\n  private _currentIndex = 0;\n  private _showNum = 1;\n  private _autoplay = false;\n  private _infinite = false;\n  private _tmpInfinite = false;\n  private _grabbing = false;\n\n  private panCount = 0;\n\n  private _disableDrag = false;\n\n  // this variable use for check the init value is write with ngModel,\n  // when init first, not set with animation\n  private hasInitWriteValue = false;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject(DOCUMENT) private _document,\n    private _renderer: Renderer2,\n    private _zone: NgZone,\n    private _cd: ChangeDetectorRef\n  ) { }\n\n  ngAfterViewInit() {\n    this.rootElm = this.container.nativeElement;\n    this.containerElm = this.rootElm.children[0] as HTMLElement;\n\n    this.init();\n\n    forkJoin(\n      this.bindClick(),\n      // when item changed, remove old hammer binding, and reset width\n      this.itemElms.changes.pipe(\n        // detectChanges to change view dots\n        tap(() => {\n          if (this.currentIndex > this.itemElms.length - 1) {\n            // i can't pass the changedetection check, only the way to using timeout. :(\n            setTimeout(() => {\n              this.currentIndex = this.itemElms.length - 1;\n            }, 0);\n          }\n          this.destroy();\n          this.removeInfiniteElm();\n          this.init();\n          this.progressWidth = 0;\n        }),\n        tap(() => this._cd.detectChanges()),\n      ),\n      resizeObservable(\n        this.rootElm, () => this.containerResize()\n      )\n    ).pipe(\n      takeUntil(this.destroy$),\n    ).subscribe();\n\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n    this.destroy$.next();\n    this.destroy$.unsubscribe();\n  }\n  writeValue(value: any) {\n    if (value || value === 0) {\n      this.currentIndex = value;\n      this.hasInitWriteValue = true;\n    }\n  }\n  registerOnChange(fn: (value: any) => any) { this.onChange = fn; }\n  registerOnTouched(fn: () => any) { this.onTouched = fn; }\n  private onChange = (_: any) => { };\n  private onTouched = () => { };\n\n  private init() {\n    this.initVariable();\n    this.setViewWidth(true);\n    this.reSetAlignDistance();\n    if (!this.disableDrag) {\n      this.hammer = this.bindHammer();\n    }\n    this.drawView(this.currentIndex, false);\n    if (isPlatformBrowser(this.platformId) && this.runLoop) {\n      this.addInfiniteElm();\n    }\n  }\n\n  private destroy() {\n    this.destoryHammer();\n\n    if (this.autoplay) { this.doNextSub$.unsubscribe(); }\n  }\n\n  private destoryHammer() {\n    if (this.hammer) {\n      this.hammer.destroy();\n    }\n  }\n\n  private addInfiniteElm() {\n    for (let i = 1; i <= this.showNum; i++) {\n      const elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {\n        $implicit: this.data[this.itemElms.length - i],\n        index: this.itemElms.length - i\n      });\n      this.addStyle(elm.rootNodes[0], {\n        position: 'absolute',\n        // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,\n        transform: `translateX(-${100 * i}%)`,\n        visibility: this.runLoop ? 'visible' : 'hidden'\n      });\n      this.setStyle(elm.rootNodes[0], 'width', this.elmWidth);\n\n      const elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {\n        $implicit: this.data[i - 1],\n        index: i - 1\n      });\n      this.addStyle(elm2.rootNodes[0], {\n        // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,\n        position: 'absolute',\n        right: 0,\n        top: 0,\n        transform: `translateX(${100 * i}%)`,\n        visibility: this.runLoop ? 'visible' : 'hidden'\n      });\n      this.setStyle(elm2.rootNodes[0], 'width', this.elmWidth);\n\n      elm.detectChanges();\n      elm2.detectChanges();\n\n      this.infiniteElmRefs.push(elm);\n      this.infiniteElmRefs.push(elm2);\n    }\n\n  }\n\n  private removeInfiniteElm() {\n    this.infiniteElmRefs.forEach(a => {\n      a.detach();\n      a.destroy();\n    });\n    if (this.infiniteContainer) {\n      this.infiniteContainer.clear();\n    }\n    this.infiniteElmRefs = [];\n  }\n\n  private containerResize() {\n    this.setViewWidth();\n    this.reSetAlignDistance();\n\n    // å çºä¸è½æ»äºï¼æä»¥è¦åå°ç¬¬ä¸åï¼ä»¥ç¢ºä¿å¨é¨é½æé¡¯ç¤º\n    if (this.align !== 'center' && this.showNum >= this.elms.length) {\n      this.currentIndex = 0;\n    }\n    this.drawView(this.currentIndex, false);\n  }\n\n  private initVariable() {\n    this._zone.runOutsideAngular(() => {\n\n      this.elms = this.itemElms.toArray().map(x => x.nativeElement);\n\n      let startEvent = this.restart.asObservable();\n      let stopEvent = this.stopEvent.asObservable();\n      if (this.mourseEnable) {\n        startEvent = merge(\n          startEvent,\n          fromEvent(this.containerElm, 'mouseleave').pipe(\n            // when leave, we should reverse grabbing state to set the mouseOn state,\n            // because when the grabbing, the mask will on, and it will occur leave again\n            filter(() => !this.grabbing),\n            tap(() => this.mouseOnContainer = false)\n          )\n        );\n        stopEvent = merge(\n          stopEvent,\n          fromEvent(this.containerElm, 'mouseover').pipe(\n            tap(() => this.mouseOnContainer = true)\n          )\n        );\n      }\n\n      this.doNext = startEvent.pipe(\n        // not using debounceTime, it will stop mourseover event detect, will cause mourse-enable error\n        // debounceTime(this.delay),\n        switchMap(() => this.speedChange),\n        switchMap(() =>\n          timer(this.delay).pipe(\n            switchMap(() => this.runProgress(20)),\n            tap(() => {\n              this.isFromAuto = true;\n              // console.log('next');\n              if (this.direction === 'left') {\n                this.currentIndex -= this.scrollNum;\n              } else {\n                this.currentIndex += this.scrollNum;\n              }\n            }),\n            takeUntil(stopEvent.pipe(\n              tap(() => this.progressWidth = 0)\n            ))\n          )\n        ));\n\n      if (this.autoplay) {\n        this.doNextSub$ = this.doNext.subscribe();\n      }\n    });\n  }\n\n  private reSetAlignDistance() {\n    switch (this.align) {\n      case 'center':\n        this.alignDistance = (this.rootElmWidth - this.elmWidth) / 2;\n        break;\n      case 'left':\n        this.alignDistance = 0;\n        break;\n      case 'right':\n        this.alignDistance = this.rootElmWidth - this.elmWidth;\n        break;\n    }\n  }\n\n  private setViewWidth(isInit?: boolean) {\n    if (this.isAutoNum) {\n      this._showNum = this.getAutoNum();\n    }\n    this._renderer.addClass(this.containerElm, 'grab');\n    if (isInit) {\n      // remain one elm height\n      this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');\n    }\n    this.elmWidth = this.rootElmWidth / this._showNum;\n\n    this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');\n\n    this.containerElmWidth = this.elmWidth * this.elms.length;\n\n    this._renderer.setStyle(this.containerElm, 'position', 'relative');\n\n    this.infiniteElmRefs.forEach((ref) => {\n      this.setStyle(ref.rootNodes[0], 'width', this.elmWidth);\n    });\n    this.elms.forEach((elm: HTMLElement) => {\n      this.setStyle(elm, 'width', this.elmWidth);\n    });\n\n  }\n\n  private bindHammer() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return null;\n    }\n    return this._zone.runOutsideAngular(() => {\n\n      const hm = new Hammer(this.containerElm);\n      hm.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });\n\n      hm.on('panleft panright panend pancancel', (e: HammerInput) => {\n        // console.log(e.type);\n\n        if (this.lengthOne) {\n          return;\n        }\n\n        this.removeContainerTransition();\n\n        if (this.autoplay) {\n          this._zone.runOutsideAngular(() => { this.stopEvent.next(); });\n        }\n\n        switch (e.type) {\n          case 'panleft':\n          case 'panright':\n            this.panCount++;\n            // only when panmove more than two times, set move\n            if (this.panCount < 2) {\n              return;\n            }\n\n            this.grabbing = true;\n            // When show-num is bigger than length, stop hammer\n            if (this.align !== 'center' && this.showNum >= this.elms.length) {\n              this.hammer.stop(true);\n              return;\n            }\n            // Slow down at the first and last pane.\n            if (!this.runLoop && this.outOfBound(e.type)) {\n              e.deltaX *= 0.2;\n            }\n\n            if (!this.notDrag) {\n              this.left = -this.currentIndex * this.elmWidth + this.alignDistance + e.deltaX;\n            }\n\n            // // if not dragmany, when bigger than half\n            if (!this.isDragMany) {\n              if (Math.abs(e.deltaX) > this.elmWidth * 0.5) {\n                if (e.deltaX > 0) {\n                  this.currentIndex -= this.scrollNum;\n                } else {\n                  this.currentIndex += this.scrollNum;\n                }\n                this.hammer.stop(true);\n                return;\n              }\n            }\n            break;\n          case 'pancancel':\n            this.drawView(this.currentIndex);\n            break;\n\n          case 'panend':\n\n            if (Math.abs(e.deltaX) > this.elmWidth * PANBOUNDARY) {\n              const moveNum = this.isDragMany ?\n                Math.ceil(Math.abs(e.deltaX) / this.elmWidth) : this.scrollNum;\n\n              let prevIndex = this.currentIndex - moveNum;\n              let nextIndex = this.currentIndex + moveNum;\n\n              // if right\n              if (e.deltaX > 0) {\n                if (!this.runLoop && prevIndex < 0) {\n                  prevIndex = 0;\n                  this.drawView(0);\n                }\n\n                this.currentIndex = prevIndex;\n                // left\n              } else {\n                if (!this.runLoop && nextIndex > this.maxRightIndex) {\n                  nextIndex = this.maxRightIndex;\n                  this.drawView(nextIndex);\n                }\n                this.currentIndex = nextIndex;\n              }\n              break;\n            }\n            this.drawView(this.currentIndex);\n            break;\n        }\n      });\n\n      return hm;\n    });\n\n  }\n\n  private bindClick() {\n    if (this.btnNext && this.btnPrev) {\n      return forkJoin(\n        fromEvent(this.btnNext.nativeElement, 'click').pipe(\n          tap(() => this.currentIndex++)\n        ),\n        fromEvent(this.btnPrev.nativeElement, 'click').pipe(\n          tap(() => this.currentIndex--)\n        )\n      );\n    }\n    return of(null);\n  }\n\n  private callRestart() {\n    // if that is autoplay\n    // if that mouse is not on container( only mouse-enable is true, the state maybe true)\n    // if now is grabbing, skip this restart, using grabbing change restart\n    if (this.autoplay && !this.mouseOnContainer && !this.grabbing) {\n      this._zone.runOutsideAngular(() => {\n        this.restart.next(null);\n      });\n    }\n  }\n\n  private drawView(index: number, isAnimation = true, isFromAuto = this.isFromAuto) {\n\n    // move element only on length is more than 1\n    if (this.elms.length > 1) {\n      this.removeContainerTransition();\n      this.left = -((index * this.elmWidth) - this.alignDistance);\n\n      if (isAnimation) {\n        if (isFromAuto) {\n          this._renderer.addClass(this.containerElm, this.aniClassAuto);\n        } else {\n          this._renderer.addClass(this.containerElm, this.aniClass);\n        }\n        // if infinite move to next index with timeout\n        this.infiniteHandler(index);\n      }\n\n    } else {\n      this.left = this.alignDistance;\n    }\n  }\n\n  private removeContainerTransition() {\n    this._renderer.removeClass(this.containerElm, this.aniClass);\n    this._renderer.removeClass(this.containerElm, this.aniClassAuto);\n  }\n\n  private infiniteHandler(index: number) {\n    if (this.runLoop) {\n      let state = 0;\n      state = (index < 0) ? -1 : state;\n      state = (index > (this.itemElms.length - 1)) ? 1 : state;\n\n      // index = index % this._showNum;\n      if (state !== 0) {\n        switch (state) {\n          case -1:\n            this._currentIndex = (this.itemElms.length + index) % this.itemElms.length;\n            break;\n          case 1:\n            this._currentIndex = index % this.itemElms.length;\n            break;\n        }\n\n        const isFromAuto = this.isFromAuto;\n        if (this.saveTimeOut) {\n          this.saveTimeOut.unsubscribe();\n        }\n\n        this.saveTimeOut = timer(this.aniTime).pipe(\n          switchMap(() => {\n            // if it is any loop carousel, the next event need wait the timeout complete\n            if (this.aniTime === this.speed) {\n              this.removeContainerTransition();\n              this.left = -((this._currentIndex - state) * this.elmWidth) + this.alignDistance;\n              return timer(50).pipe(\n                tap(() => {\n                  this.drawView(this.currentIndex, this.hasInitWriteValue, isFromAuto);\n                })\n              );\n            } else {\n              this.drawView(this.currentIndex, false);\n            }\n            return of(null);\n          }),\n          takeUntil(this.stopEvent)\n        ).subscribe();\n      }\n    }\n\n  }\n\n\n  private outOfBound(type) {\n    switch (type) {\n      case 'panleft':\n        return this.currentIndex >= this.maxRightIndex;\n      case 'panright':\n        return this.currentIndex <= 0;\n    }\n  }\n\n  private runProgress(betweenTime): Observable<any> {\n\n    return this._zone.runOutsideAngular(() => {\n      const howTimes = this.speed / betweenTime;\n      const everyIncrease = 100 / this.speed * betweenTime;\n      return interval(betweenTime).pipe(\n        tap(t => {\n          this.progressWidth = (t % howTimes) * everyIncrease;\n        }),\n        bufferCount(Math.round(howTimes), 0)\n      );\n    });\n  }\n\n  private getAutoNum() {\n    const curr_width = this.rootElmWidth;\n    // check user has had set breakpoint\n    if (this.breakpoint.length > 0) {\n      // get the last bigget point\n      const now = this.breakpoint.find((b) => {\n        return b.width >= curr_width;\n      });\n      // if find value, it is current width\n      if (now) {\n        return now.number;\n      }\n      return this.breakpoint[this.breakpoint.length - 1].number;\n    }\n\n    // system init show number\n    const initNum = 3;\n    // 610\n    if (curr_width > 300) {\n      return Math.floor(initNum + (curr_width / 200));\n    }\n    return initNum;\n  }\n\n  private addStyle(elm: HTMLElement, style: { [key: string]: string | number }) {\n    if (style) {\n      Object.keys(style).forEach((key) => {\n        const value = style[key];\n        this._renderer.setStyle(elm, key, value);\n      });\n    }\n  }\n\n  private setStyle(elm: HTMLElement, style: string, value: number) {\n    if (isPlatformBrowser(this.platformId)) {\n      this._renderer.setStyle(elm, style, `${value}px`);\n    } else {\n      this._renderer.setStyle(elm, style, `${value}%`);\n    }\n  }\n\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxHmCarouselDynamicDirective } from './ngx-hm-carousel-dynamic.directive';\nimport { NgxHmCarouselComponent } from './ngx-hm-carousel.component';\nimport { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  declarations: [\n    NgxHmCarouselComponent,\n    NgxHmCarouselDynamicDirective,\n    NgxHmCarouselItemDirective\n  ],\n  exports: [\n    NgxHmCarouselComponent,\n    NgxHmCarouselDynamicDirective,\n    NgxHmCarouselItemDirective\n  ]\n})\nexport class NgxHmCarouselModule { }\n"]}