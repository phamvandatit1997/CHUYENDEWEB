/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, forwardRef, Inject, Input, NgZone, PLATFORM_ID, QueryList, Renderer2, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, forkJoin, fromEvent, interval, merge, of, Subject, timer } from 'rxjs';
import { bufferCount, switchMap, takeUntil, tap, filter } from 'rxjs/operators';
import { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';
import { resizeObservable } from './rxjs.observable.resize';
import { DOCUMENT } from '@angular/common';
// if the pane is paned .15, switch to the next pane.
/** @type {?} */
const PANBOUNDARY = 0.15;
export class NgxHmCarouselComponent {
    /**
     * @param {?} platformId
     * @param {?} _document
     * @param {?} _renderer
     * @param {?} _zone
     * @param {?} _cd
     */
    constructor(platformId, _document, _renderer, _zone, _cd) {
        this.platformId = platformId;
        this._document = _document;
        this._renderer = _renderer;
        this._zone = _zone;
        this._cd = _cd;
        this.aniTime = 400;
        this.aniClass = 'transition';
        this.aniClassAuto = this.aniClass;
        // this default autoplay animation is same as aniClass
        this.align = 'center';
        this.notDrag = false;
        this.mourseEnable = false;
        this.delay = 8000;
        this.direction = 'right';
        this.scrollNum = 1;
        this.isDragMany = false;
        this.breakpoint = [];
        // using for check mouse or touchend
        this.leaveObs$ = merge(fromEvent(this._document, 'mouseup'), fromEvent(this._document, 'touchend')).pipe(tap((e) => {
            this.grabbing = false;
            e.stopPropagation();
            e.preventDefault();
        }));
        this.isFromAuto = true;
        this.isAutoNum = false;
        this.mouseOnContainer = false;
        this.alignDistance = 0;
        this.elmWidth = 0;
        this.infiniteElmRefs = [];
        this.restart = new BehaviorSubject(null);
        this.speedChange = new BehaviorSubject(5000);
        this.stopEvent = new Subject();
        this.destroy$ = new Subject();
        this._porgressWidth = 0;
        this._currentIndex = 0;
        this._showNum = 1;
        this._autoplay = false;
        this._infinite = false;
        this._tmpInfinite = false;
        this._grabbing = false;
        this.panCount = 0;
        this._disableDrag = false;
        // this variable use for check the init value is write with ngModel,
        // when init first, not set with animation
        this.hasInitWriteValue = false;
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    /**
     * @return {?}
     */
    get disableDrag() {
        return this._disableDrag;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disableDrag(value) {
        if (this.rootElm) {
            if (this._disableDrag !== value) {
                if (value) {
                    this.destoryHammer();
                }
                else {
                    this.hammer = this.bindHammer();
                }
            }
        }
        this._disableDrag = value;
    }
    /**
     * @return {?}
     */
    get infinite() { return this._infinite; }
    /**
     * @param {?} value
     * @return {?}
     */
    set infinite(value) {
        this._infinite = value;
        this.infiniteElmRefs.forEach((ref) => {
            this.addStyle(ref.rootNodes[0], {
                visibility: this.runLoop ? 'visible' : 'hidden'
            });
        });
    }
    /**
     * @return {?}
     */
    get speed() { return this.speedChange.value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set speed(value) {
        this._zone.runOutsideAngular(() => {
            this.speedChange.next(value);
        });
    }
    /**
     * @return {?}
     */
    get showNum() { return this._showNum; }
    /**
     * @param {?} value
     * @return {?}
     */
    set showNum(value) {
        if (value === 'auto') {
            this.isAutoNum = true;
        }
        else {
            this._showNum = +value;
            if (this.rootElm) {
                this.setViewWidth();
                this.reSetAlignDistance();
            }
        }
    }
    /**
     * @return {?}
     */
    get autoplay() { return this._autoplay; }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoplay(value) {
        if (isPlatformBrowser(this.platformId)) {
            if (this.elms) {
                this.progressWidth = 0;
                if (value) {
                    this._zone.runOutsideAngular(() => {
                        this.doNextSub$ = this.doNext.subscribe();
                    });
                }
                else {
                    if (this.doNextSub$) {
                        this.doNextSub$.unsubscribe();
                    }
                }
            }
        }
        this._autoplay = value;
        // if set autoplay, then the infinite is true
        if (value) {
            this._tmpInfinite = this.infinite;
            this.infinite = true;
        }
        else {
            this.infinite = this._tmpInfinite;
        }
    }
    /**
     * @return {?}
     */
    get currentIndex() { return this._currentIndex; }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentIndex(value) {
        // if now index if not equale to save index, do someting
        if (this.currentIndex !== value) {
            // if the value is not contain with the boundary not handler
            if (!this.runLoop && !(0 <= value && value <= this.itemElms.length - 1)) {
                return;
            }
            this._currentIndex = value;
            if (this.elms) {
                if (this.autoplay && !this.isFromAuto) {
                    this._zone.runOutsideAngular(() => {
                        this.stopEvent.next();
                        this.callRestart();
                    });
                }
                this.drawView(this.currentIndex, this.hasInitWriteValue);
                if (this.isDragMany) {
                    this.hasInitWriteValue = true;
                }
            }
            if (0 <= this.currentIndex && this.currentIndex <= this.itemElms.length - 1) {
                this._zone.run(() => {
                    this.onChange(this.currentIndex);
                    this._cd.detectChanges();
                });
            }
        }
        this.isFromAuto = false;
    }
    /**
     * @return {?}
     */
    get progressWidth() { return this._porgressWidth; }
    /**
     * @param {?} value
     * @return {?}
     */
    set progressWidth(value) {
        if (this.progressElm !== undefined && this.autoplay) {
            this._porgressWidth = value;
            this._renderer.setStyle(((/** @type {?} */ (this.progressContainerElm.nativeElement))).children[0], 'width', `${this.progressWidth}%`);
        }
    }
    /**
     * @return {?}
     */
    get grabbing() { return this._grabbing; }
    /**
     * @param {?} value
     * @return {?}
     */
    set grabbing(value) {
        if (this._grabbing !== value) {
            // console.log(value);
            this._zone.run(() => {
                this._grabbing = value;
                if (value) {
                    this._renderer.addClass(this.containerElm, 'grabbing');
                }
                else {
                    this.panCount = 0;
                    this.callRestart();
                    this._renderer.removeClass(this.containerElm, 'grabbing');
                }
                this._cd.detectChanges();
            });
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    set left(value) {
        if (isPlatformBrowser(this.platformId)) {
            this._renderer.setStyle(this.containerElm, 'transform', `translateX(${value}px)`);
        }
        else {
            this._renderer.setStyle(this.containerElm, 'transform', `translateX(${value}%)`);
        }
    }
    /**
     * @private
     * @return {?}
     */
    get maxRightIndex() {
        /** @type {?} */
        let addIndex = 0;
        switch (this.align) {
            case 'left':
                addIndex = 0;
                break;
            case 'center':
                addIndex = (/** @type {?} */ (this.showNum)) - 1;
                break;
            case 'right':
                addIndex = (/** @type {?} */ (this.showNum)) - 1;
                break;
        }
        return ((this.itemElms.length - 1) - this._showNum + 1) + addIndex;
    }
    /**
     * @private
     * @return {?}
     */
    get runLoop() { return this.autoplay || this.infinite; }
    /**
     * @private
     * @return {?}
     */
    get lengthOne() { return this.itemElms.length === 1; }
    /**
     * @private
     * @return {?}
     */
    get rootElmWidth() {
        return (isPlatformBrowser(this.platformId) ? this.rootElm.getBoundingClientRect().width : 100);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    set containerElmWidth(value) {
        this.setStyle(this.containerElm, 'width', value);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.rootElm = this.container.nativeElement;
        this.containerElm = (/** @type {?} */ (this.rootElm.children[0]));
        this.init();
        forkJoin(this.bindClick(), 
        // when item changed, remove old hammer binding, and reset width
        this.itemElms.changes.pipe(
        // detectChanges to change view dots
        tap(() => {
            if (this.currentIndex > this.itemElms.length - 1) {
                // i can't pass the changedetection check, only the way to using timeout. :(
                setTimeout(() => {
                    this.currentIndex = this.itemElms.length - 1;
                }, 0);
            }
            this.destroy();
            this.removeInfiniteElm();
            this.init();
            this.progressWidth = 0;
        }), tap(() => this._cd.detectChanges())), resizeObservable(this.rootElm, () => this.containerResize())).pipe(takeUntil(this.destroy$)).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
        this.destroy$.next();
        this.destroy$.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value || value === 0) {
            this.currentIndex = value;
            this.hasInitWriteValue = true;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.initVariable();
        this.setViewWidth(true);
        this.reSetAlignDistance();
        if (!this.disableDrag) {
            this.hammer = this.bindHammer();
        }
        this.drawView(this.currentIndex, false);
        if (isPlatformBrowser(this.platformId) && this.runLoop) {
            this.addInfiniteElm();
        }
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        this.destoryHammer();
        if (this.autoplay) {
            this.doNextSub$.unsubscribe();
        }
    }
    /**
     * @private
     * @return {?}
     */
    destoryHammer() {
        if (this.hammer) {
            this.hammer.destroy();
        }
    }
    /**
     * @private
     * @return {?}
     */
    addInfiniteElm() {
        for (let i = 1; i <= this.showNum; i++) {
            /** @type {?} */
            const elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                $implicit: this.data[this.itemElms.length - i],
                index: this.itemElms.length - i
            });
            this.addStyle(elm.rootNodes[0], {
                position: 'absolute',
                // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,
                transform: `translateX(-${100 * i}%)`,
                visibility: this.runLoop ? 'visible' : 'hidden'
            });
            this.setStyle(elm.rootNodes[0], 'width', this.elmWidth);
            /** @type {?} */
            const elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                $implicit: this.data[i - 1],
                index: i - 1
            });
            this.addStyle(elm2.rootNodes[0], {
                // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,
                position: 'absolute',
                right: 0,
                top: 0,
                transform: `translateX(${100 * i}%)`,
                visibility: this.runLoop ? 'visible' : 'hidden'
            });
            this.setStyle(elm2.rootNodes[0], 'width', this.elmWidth);
            elm.detectChanges();
            elm2.detectChanges();
            this.infiniteElmRefs.push(elm);
            this.infiniteElmRefs.push(elm2);
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeInfiniteElm() {
        this.infiniteElmRefs.forEach(a => {
            a.detach();
            a.destroy();
        });
        if (this.infiniteContainer) {
            this.infiniteContainer.clear();
        }
        this.infiniteElmRefs = [];
    }
    /**
     * @private
     * @return {?}
     */
    containerResize() {
        this.setViewWidth();
        this.reSetAlignDistance();
        // 因為不能滑了，所以要回到第一個，以確保全部都有顯示
        if (this.align !== 'center' && this.showNum >= this.elms.length) {
            this.currentIndex = 0;
        }
        this.drawView(this.currentIndex, false);
    }
    /**
     * @private
     * @return {?}
     */
    initVariable() {
        this._zone.runOutsideAngular(() => {
            this.elms = this.itemElms.toArray().map(x => x.nativeElement);
            /** @type {?} */
            let startEvent = this.restart.asObservable();
            /** @type {?} */
            let stopEvent = this.stopEvent.asObservable();
            if (this.mourseEnable) {
                startEvent = merge(startEvent, fromEvent(this.containerElm, 'mouseleave').pipe(
                // when leave, we should reverse grabbing state to set the mouseOn state,
                // because when the grabbing, the mask will on, and it will occur leave again
                filter(() => !this.grabbing), tap(() => this.mouseOnContainer = false)));
                stopEvent = merge(stopEvent, fromEvent(this.containerElm, 'mouseover').pipe(tap(() => this.mouseOnContainer = true)));
            }
            this.doNext = startEvent.pipe(
            // not using debounceTime, it will stop mourseover event detect, will cause mourse-enable error
            // debounceTime(this.delay),
            switchMap(() => this.speedChange), switchMap(() => timer(this.delay).pipe(switchMap(() => this.runProgress(20)), tap(() => {
                this.isFromAuto = true;
                // console.log('next');
                if (this.direction === 'left') {
                    this.currentIndex -= this.scrollNum;
                }
                else {
                    this.currentIndex += this.scrollNum;
                }
            }), takeUntil(stopEvent.pipe(tap(() => this.progressWidth = 0))))));
            if (this.autoplay) {
                this.doNextSub$ = this.doNext.subscribe();
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    reSetAlignDistance() {
        switch (this.align) {
            case 'center':
                this.alignDistance = (this.rootElmWidth - this.elmWidth) / 2;
                break;
            case 'left':
                this.alignDistance = 0;
                break;
            case 'right':
                this.alignDistance = this.rootElmWidth - this.elmWidth;
                break;
        }
    }
    /**
     * @private
     * @param {?=} isInit
     * @return {?}
     */
    setViewWidth(isInit) {
        if (this.isAutoNum) {
            this._showNum = this.getAutoNum();
        }
        this._renderer.addClass(this.containerElm, 'grab');
        if (isInit) {
            // remain one elm height
            this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        }
        this.elmWidth = this.rootElmWidth / this._showNum;
        this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        this.containerElmWidth = this.elmWidth * this.elms.length;
        this._renderer.setStyle(this.containerElm, 'position', 'relative');
        this.infiniteElmRefs.forEach((ref) => {
            this.setStyle(ref.rootNodes[0], 'width', this.elmWidth);
        });
        this.elms.forEach((elm) => {
            this.setStyle(elm, 'width', this.elmWidth);
        });
    }
    /**
     * @private
     * @return {?}
     */
    bindHammer() {
        if (!isPlatformBrowser(this.platformId)) {
            return null;
        }
        return this._zone.runOutsideAngular(() => {
            /** @type {?} */
            const hm = new Hammer(this.containerElm);
            hm.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });
            hm.on('panleft panright panend pancancel', (e) => {
                // console.log(e.type);
                if (this.lengthOne) {
                    return;
                }
                this.removeContainerTransition();
                if (this.autoplay) {
                    this._zone.runOutsideAngular(() => { this.stopEvent.next(); });
                }
                switch (e.type) {
                    case 'panleft':
                    case 'panright':
                        this.panCount++;
                        // only when panmove more than two times, set move
                        if (this.panCount < 2) {
                            return;
                        }
                        this.grabbing = true;
                        // When show-num is bigger than length, stop hammer
                        if (this.align !== 'center' && this.showNum >= this.elms.length) {
                            this.hammer.stop(true);
                            return;
                        }
                        // Slow down at the first and last pane.
                        if (!this.runLoop && this.outOfBound(e.type)) {
                            e.deltaX *= 0.2;
                        }
                        if (!this.notDrag) {
                            this.left = -this.currentIndex * this.elmWidth + this.alignDistance + e.deltaX;
                        }
                        // // if not dragmany, when bigger than half
                        if (!this.isDragMany) {
                            if (Math.abs(e.deltaX) > this.elmWidth * 0.5) {
                                if (e.deltaX > 0) {
                                    this.currentIndex -= this.scrollNum;
                                }
                                else {
                                    this.currentIndex += this.scrollNum;
                                }
                                this.hammer.stop(true);
                                return;
                            }
                        }
                        break;
                    case 'pancancel':
                        this.drawView(this.currentIndex);
                        break;
                    case 'panend':
                        if (Math.abs(e.deltaX) > this.elmWidth * PANBOUNDARY) {
                            /** @type {?} */
                            const moveNum = this.isDragMany ?
                                Math.ceil(Math.abs(e.deltaX) / this.elmWidth) : this.scrollNum;
                            /** @type {?} */
                            let prevIndex = this.currentIndex - moveNum;
                            /** @type {?} */
                            let nextIndex = this.currentIndex + moveNum;
                            // if right
                            if (e.deltaX > 0) {
                                if (!this.runLoop && prevIndex < 0) {
                                    prevIndex = 0;
                                    this.drawView(0);
                                }
                                this.currentIndex = prevIndex;
                                // left
                            }
                            else {
                                if (!this.runLoop && nextIndex > this.maxRightIndex) {
                                    nextIndex = this.maxRightIndex;
                                    this.drawView(nextIndex);
                                }
                                this.currentIndex = nextIndex;
                            }
                            break;
                        }
                        this.drawView(this.currentIndex);
                        break;
                }
            });
            return hm;
        });
    }
    /**
     * @private
     * @return {?}
     */
    bindClick() {
        if (this.btnNext && this.btnPrev) {
            return forkJoin(fromEvent(this.btnNext.nativeElement, 'click').pipe(tap(() => this.currentIndex++)), fromEvent(this.btnPrev.nativeElement, 'click').pipe(tap(() => this.currentIndex--)));
        }
        return of(null);
    }
    /**
     * @private
     * @return {?}
     */
    callRestart() {
        // if that is autoplay
        // if that mouse is not on container( only mouse-enable is true, the state maybe true)
        // if now is grabbing, skip this restart, using grabbing change restart
        if (this.autoplay && !this.mouseOnContainer && !this.grabbing) {
            this._zone.runOutsideAngular(() => {
                this.restart.next(null);
            });
        }
    }
    /**
     * @private
     * @param {?} index
     * @param {?=} isAnimation
     * @param {?=} isFromAuto
     * @return {?}
     */
    drawView(index, isAnimation = true, isFromAuto = this.isFromAuto) {
        // move element only on length is more than 1
        if (this.elms.length > 1) {
            this.removeContainerTransition();
            this.left = -((index * this.elmWidth) - this.alignDistance);
            if (isAnimation) {
                if (isFromAuto) {
                    this._renderer.addClass(this.containerElm, this.aniClassAuto);
                }
                else {
                    this._renderer.addClass(this.containerElm, this.aniClass);
                }
                // if infinite move to next index with timeout
                this.infiniteHandler(index);
            }
        }
        else {
            this.left = this.alignDistance;
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeContainerTransition() {
        this._renderer.removeClass(this.containerElm, this.aniClass);
        this._renderer.removeClass(this.containerElm, this.aniClassAuto);
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    infiniteHandler(index) {
        if (this.runLoop) {
            /** @type {?} */
            let state = 0;
            state = (index < 0) ? -1 : state;
            state = (index > (this.itemElms.length - 1)) ? 1 : state;
            // index = index % this._showNum;
            if (state !== 0) {
                switch (state) {
                    case -1:
                        this._currentIndex = (this.itemElms.length + index) % this.itemElms.length;
                        break;
                    case 1:
                        this._currentIndex = index % this.itemElms.length;
                        break;
                }
                /** @type {?} */
                const isFromAuto = this.isFromAuto;
                if (this.saveTimeOut) {
                    this.saveTimeOut.unsubscribe();
                }
                this.saveTimeOut = timer(this.aniTime).pipe(switchMap(() => {
                    // if it is any loop carousel, the next event need wait the timeout complete
                    if (this.aniTime === this.speed) {
                        this.removeContainerTransition();
                        this.left = -((this._currentIndex - state) * this.elmWidth) + this.alignDistance;
                        return timer(50).pipe(tap(() => {
                            this.drawView(this.currentIndex, this.hasInitWriteValue, isFromAuto);
                        }));
                    }
                    else {
                        this.drawView(this.currentIndex, false);
                    }
                    return of(null);
                }), takeUntil(this.stopEvent)).subscribe();
            }
        }
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    outOfBound(type) {
        switch (type) {
            case 'panleft':
                return this.currentIndex >= this.maxRightIndex;
            case 'panright':
                return this.currentIndex <= 0;
        }
    }
    /**
     * @private
     * @param {?} betweenTime
     * @return {?}
     */
    runProgress(betweenTime) {
        return this._zone.runOutsideAngular(() => {
            /** @type {?} */
            const howTimes = this.speed / betweenTime;
            /** @type {?} */
            const everyIncrease = 100 / this.speed * betweenTime;
            return interval(betweenTime).pipe(tap(t => {
                this.progressWidth = (t % howTimes) * everyIncrease;
            }), bufferCount(Math.round(howTimes), 0));
        });
    }
    /**
     * @private
     * @return {?}
     */
    getAutoNum() {
        /** @type {?} */
        const curr_width = this.rootElmWidth;
        // check user has had set breakpoint
        if (this.breakpoint.length > 0) {
            // get the last bigget point
            /** @type {?} */
            const now = this.breakpoint.find((b) => {
                return b.width >= curr_width;
            });
            // if find value, it is current width
            if (now) {
                return now.number;
            }
            return this.breakpoint[this.breakpoint.length - 1].number;
        }
        // system init show number
        /** @type {?} */
        const initNum = 3;
        // 610
        if (curr_width > 300) {
            return Math.floor(initNum + (curr_width / 200));
        }
        return initNum;
    }
    /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @return {?}
     */
    addStyle(elm, style) {
        if (style) {
            Object.keys(style).forEach((key) => {
                /** @type {?} */
                const value = style[key];
                this._renderer.setStyle(elm, key, value);
            });
        }
    }
    /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    setStyle(elm, style, value) {
        if (isPlatformBrowser(this.platformId)) {
            this._renderer.setStyle(elm, style, `${value}px`);
        }
        else {
            this._renderer.setStyle(elm, style, `${value}%`);
        }
    }
}
NgxHmCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-hm-carousel',
                template: "<div #containerElm class=\"carousel\">\n  <!-- main content -->\n  <ng-content select=\"[ngx-hm-carousel-container]\"></ng-content>\n  <!-- left -->\n  <div #prev *ngIf=\"contentPrev\"\n    class=\"direction left\">\n    <ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n  </div>\n  <!--  right -->\n  <div #next *ngIf=\"contentNext\"\n    class=\"direction right\">\n    <ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n  </div>\n  <!-- indicators -->\n  <ul class=\"indicators\" *ngIf=\"dotElm\">\n    <li\n      *ngFor=\"let dot of itemElms; let i = index;\"\n      (click)=\"currentIndex = i\">\n      <ng-container\n        *ngTemplateOutlet=\"dotElm, context: {\n          $implicit: {\n            index : i,\n            currentIndex : currentIndex\n          }\n        }\">\n      </ng-container>\n    </li>\n  </ul>\n  <!-- progress -->\n  <div *ngIf=\"progressElm && autoplay\" #progress>\n    <ng-container\n      *ngTemplateOutlet=\"progressElm\">\n    </ng-container>\n  </div>\n\n  <div class=\"mask\" *ngIf=\"grabbing\">\n    <ng-container *ngIf=\"leaveObs$ | async\"></ng-container>\n  </div>\n</div>\n",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NgxHmCarouselComponent),
                        multi: true
                    }],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block;height:100%}.ngx-hm-carousel-display-npwrap{display:flex!important;flex-wrap:nowrap!important;flex-direction:row!important;overflow:hidden!important}.carousel{overflow:hidden;position:relative;width:100%;height:100%}.carousel ul.indicators{list-style:none;bottom:1rem;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.carousel ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}.carousel .direction{position:absolute;height:100%;cursor:pointer;display:flex;align-items:center;justify-content:center;top:0}.carousel .direction.left{left:0}.carousel .direction.right{position:absolute;right:0}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{position:absolute;left:0;top:0;right:0;bottom:0}"]
            }] }
];
/** @nocollapse */
NgxHmCarouselComponent.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
NgxHmCarouselComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['containerElm',] }],
    btnPrev: [{ type: ViewChild, args: ['prev',] }],
    btnNext: [{ type: ViewChild, args: ['next',] }],
    progressContainerElm: [{ type: ViewChild, args: ['progress',] }],
    itemElms: [{ type: ContentChildren, args: [NgxHmCarouselItemDirective, { read: ElementRef },] }],
    contentPrev: [{ type: ContentChild, args: ['carouselPrev',] }],
    contentNext: [{ type: ContentChild, args: ['carouselNext',] }],
    dotElm: [{ type: ContentChild, args: ['carouselDot',] }],
    progressElm: [{ type: ContentChild, args: ['carouselProgress',] }],
    infiniteContainer: [{ type: ContentChild, args: ['infiniteContainer', { read: ViewContainerRef },] }],
    contentContent: [{ type: ContentChild, args: ['carouselContent',] }],
    data: [{ type: Input }],
    aniTime: [{ type: Input }],
    aniClass: [{ type: Input }],
    aniClassAuto: [{ type: Input }],
    align: [{ type: Input }],
    notDrag: [{ type: Input, args: ['not-follow-pan',] }],
    mourseEnable: [{ type: Input, args: ['mourse-enable',] }],
    delay: [{ type: Input, args: ['between-delay',] }],
    direction: [{ type: Input, args: ['autoplay-direction',] }],
    scrollNum: [{ type: Input, args: ['scroll-num',] }],
    isDragMany: [{ type: Input, args: ['drag-many',] }],
    breakpoint: [{ type: Input }],
    disableDrag: [{ type: Input, args: ['disable-drag',] }],
    infinite: [{ type: Input, args: ['infinite',] }],
    speed: [{ type: Input, args: ['autoplay-speed',] }],
    showNum: [{ type: Input, args: ['show-num',] }],
    autoplay: [{ type: Input, args: ['autoplay',] }]
};
if (false) {
    /** @type {?} */
    NgxHmCarouselComponent.prototype.container;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.btnPrev;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.btnNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.progressContainerElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.itemElms;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentPrev;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.dotElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.progressElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.infiniteContainer;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentContent;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.data;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniTime;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniClass;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniClassAuto;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.align;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.notDrag;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.mourseEnable;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.delay;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.direction;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.scrollNum;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.isDragMany;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.breakpoint;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.leaveObs$;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.isFromAuto;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.isAutoNum;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.mouseOnContainer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.alignDistance;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.elmWidth;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.rootElm;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.containerElm;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.elms;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.infiniteElmRefs;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.hammer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.saveTimeOut;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.doNextSub$;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.doNext;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.restart;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.speedChange;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.stopEvent;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._porgressWidth;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._currentIndex;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._showNum;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._autoplay;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._infinite;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._tmpInfinite;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._grabbing;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.panCount;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._disableDrag;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.hasInitWriteValue;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._document;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._cd;
}
//# sourceMappingURL=data:application/json;base64,