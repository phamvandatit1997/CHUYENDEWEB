/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
export class NgxHmCarouselDynamicDirective {
    /**
     * @param {?} _view
     * @param {?} _template
     */
    constructor(_view, _template) {
        this._view = _view;
        this._template = _template;
        this.compelete = false;
        this._view.clear();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentI(value) {
        if (!this.compelete) {
            /** @type {?} */
            const nextI = value + 1;
            /** @type {?} */
            const prevI = value - 1;
            if (this.index === 0 ||
                this.index === this.length - 1 ||
                this.index === nextI ||
                this.index === prevI ||
                this.index === value) {
                this._view.createEmbeddedView(this._template);
                this.compelete = true;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NgxHmCarouselDynamicDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxHmCarouselDynamic]'
            },] }
];
/** @nocollapse */
NgxHmCarouselDynamicDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
NgxHmCarouselDynamicDirective.propDecorators = {
    index: [{ type: Input, args: ['ngxHmCarouselDynamic',] }],
    length: [{ type: Input, args: ['ngxHmCarouselDynamicLength',] }],
    currentI: [{ type: Input, args: ['ngxHmCarouselDynamicIndex',] }]
};
if (false) {
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.index;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.length;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype.compelete;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype._view;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype._template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhtLWNhcm91c2VsLWR5bmFtaWMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhtLWNhcm91c2VsLyIsInNvdXJjZXMiOlsibGliL25neC1obS1jYXJvdXNlbC1keW5hbWljLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3hGLE1BQU0sT0FBTyw2QkFBNkI7Ozs7O0lBeUJ4QyxZQUNVLEtBQXVCLEVBQ3ZCLFNBQTJCO1FBRDNCLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBSDdCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFJeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQXpCRCxJQUVJLFFBQVEsQ0FBQyxLQUFhO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFOztrQkFFYixLQUFLLEdBQUcsS0FBSyxHQUFHLENBQUM7O2tCQUNqQixLQUFLLEdBQUcsS0FBSyxHQUFHLENBQUM7WUFFdkIsSUFDRSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUM7Z0JBQ2hCLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUM5QixJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUs7Z0JBQ3BCLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztnQkFDcEIsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQzthQUN2QjtTQUNGO0lBQ0gsQ0FBQzs7OztJQVNELFFBQVE7SUFDUixDQUFDOzs7WUFuQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx3QkFBd0I7YUFDbkM7Ozs7WUFKK0MsZ0JBQWdCO1lBQTdCLFdBQVc7OztvQkFPM0MsS0FBSyxTQUFDLHNCQUFzQjtxQkFDNUIsS0FBSyxTQUFDLDRCQUE0Qjt1QkFDbEMsS0FBSyxTQUFDLDJCQUEyQjs7OztJQUZsQyw4Q0FBNkM7O0lBQzdDLCtDQUFvRDs7Ozs7SUFxQnBELGtEQUEwQjs7Ozs7SUFFeEIsOENBQStCOzs7OztJQUMvQixrREFBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hIbUNhcm91c2VsRHluYW1pY10nXG59KVxuZXhwb3J0IGNsYXNzIE5neEhtQ2Fyb3VzZWxEeW5hbWljRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoJ25neEhtQ2Fyb3VzZWxEeW5hbWljJykgaW5kZXg6IG51bWJlcjtcbiAgQElucHV0KCduZ3hIbUNhcm91c2VsRHluYW1pY0xlbmd0aCcpIGxlbmd0aDogbnVtYmVyO1xuICBASW5wdXQoJ25neEhtQ2Fyb3VzZWxEeW5hbWljSW5kZXgnKVxuXG4gIHNldCBjdXJyZW50SSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKCF0aGlzLmNvbXBlbGV0ZSkge1xuXG4gICAgICBjb25zdCBuZXh0SSA9IHZhbHVlICsgMTtcbiAgICAgIGNvbnN0IHByZXZJID0gdmFsdWUgLSAxO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuaW5kZXggPT09IDAgfHxcbiAgICAgICAgdGhpcy5pbmRleCA9PT0gdGhpcy5sZW5ndGggLSAxIHx8XG4gICAgICAgIHRoaXMuaW5kZXggPT09IG5leHRJIHx8XG4gICAgICAgIHRoaXMuaW5kZXggPT09IHByZXZJIHx8XG4gICAgICAgIHRoaXMuaW5kZXggPT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3ZpZXcuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuX3RlbXBsYXRlKTtcbiAgICAgICAgdGhpcy5jb21wZWxldGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcGVsZXRlID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3ZpZXc6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBfdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICB0aGlzLl92aWV3LmNsZWFyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgfVxuXG59XG4iXX0=