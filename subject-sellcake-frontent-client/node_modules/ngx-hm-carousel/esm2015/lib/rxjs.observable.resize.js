/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import ResizeObserver from 'resize-observer-polyfill';
import { Observable } from 'rxjs';
import { debounceTime, tap, finalize } from 'rxjs/operators';
/**
 * An observable creator for element resize.
 * @param {?} elm the watch element.
 * @param {?} cb when resize complete, call back function.
 * @param {?=} time resize emit time, default is 200
 * @return {?}
 */
export function resizeObservable(elm, cb, time = 200) {
    /** @type {?} */
    let elmObserve$;
    return Observable.create((observer) => {
        elmObserve$ = new ResizeObserver((entries, obs) => {
            observer.next(elmObserve$);
        });
        elmObserve$.observe(elm);
    }).pipe(debounceTime(time), tap(() => {
        cb();
    }), finalize(() => {
        elmObserve$.unobserve(elm);
        elmObserve$.disconnect();
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnhqcy5vYnNlcnZhYmxlLnJlc2l6ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1obS1jYXJvdXNlbC8iLCJzb3VyY2VzIjpbImxpYi9yeGpzLm9ic2VydmFibGUucmVzaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLGNBQWMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQVE3RCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsR0FBZ0IsRUFBRSxFQUFjLEVBQUUsSUFBSSxHQUFHLEdBQUc7O1FBQ3ZFLFdBQTJCO0lBQy9CLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQXlCLEVBQUUsRUFBRTtRQUNyRCxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDaEQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNMLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFDbEIsR0FBRyxDQUFDLEdBQUcsRUFBRTtRQUNQLEVBQUUsRUFBRSxDQUFDO0lBQ1AsQ0FBQyxDQUFDLEVBQ0YsUUFBUSxDQUFDLEdBQUcsRUFBRTtRQUNaLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0IsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpYmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIHRhcCwgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogQW4gb2JzZXJ2YWJsZSBjcmVhdG9yIGZvciBlbGVtZW50IHJlc2l6ZS5cbiAqIEBwYXJhbSBlbG0gdGhlIHdhdGNoIGVsZW1lbnQuXG4gKiBAcGFyYW0gY2Igd2hlbiByZXNpemUgY29tcGxldGUsIGNhbGwgYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB0aW1lIHJlc2l6ZSBlbWl0IHRpbWUsIGRlZmF1bHQgaXMgMjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNpemVPYnNlcnZhYmxlKGVsbTogSFRNTEVsZW1lbnQsIGNiOiAoKSA9PiB2b2lkLCB0aW1lID0gMjAwKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgbGV0IGVsbU9ic2VydmUkOiBSZXNpemVPYnNlcnZlcjtcbiAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogU3Vic2NyaWJlcjxhbnk+KSA9PiB7XG4gICAgZWxtT2JzZXJ2ZSQgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMsIG9icykgPT4ge1xuICAgICAgb2JzZXJ2ZXIubmV4dChlbG1PYnNlcnZlJCk7XG4gICAgfSk7XG4gICAgZWxtT2JzZXJ2ZSQub2JzZXJ2ZShlbG0pO1xuICB9KS5waXBlKFxuICAgIGRlYm91bmNlVGltZSh0aW1lKSxcbiAgICB0YXAoKCkgPT4ge1xuICAgICAgY2IoKTtcbiAgICB9KSxcbiAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICBlbG1PYnNlcnZlJC51bm9ic2VydmUoZWxtKTtcbiAgICAgIGVsbU9ic2VydmUkLmRpc2Nvbm5lY3QoKTtcbiAgICB9KVxuICApO1xufVxuIl19