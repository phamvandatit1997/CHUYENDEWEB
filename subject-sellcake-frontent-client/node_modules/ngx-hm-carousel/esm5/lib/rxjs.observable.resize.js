/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import ResizeObserver from 'resize-observer-polyfill';
import { Observable } from 'rxjs';
import { debounceTime, tap, finalize } from 'rxjs/operators';
/**
 * An observable creator for element resize.
 * @param {?} elm the watch element.
 * @param {?} cb when resize complete, call back function.
 * @param {?=} time resize emit time, default is 200
 * @return {?}
 */
export function resizeObservable(elm, cb, time) {
    if (time === void 0) { time = 200; }
    /** @type {?} */
    var elmObserve$;
    return Observable.create(function (observer) {
        elmObserve$ = new ResizeObserver(function (entries, obs) {
            observer.next(elmObserve$);
        });
        elmObserve$.observe(elm);
    }).pipe(debounceTime(time), tap(function () {
        cb();
    }), finalize(function () {
        elmObserve$.unobserve(elm);
        elmObserve$.disconnect();
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnhqcy5vYnNlcnZhYmxlLnJlc2l6ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1obS1jYXJvdXNlbC8iLCJzb3VyY2VzIjpbImxpYi9yeGpzLm9ic2VydmFibGUucmVzaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLGNBQWMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQVE3RCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsR0FBZ0IsRUFBRSxFQUFjLEVBQUUsSUFBVTtJQUFWLHFCQUFBLEVBQUEsVUFBVTs7UUFDdkUsV0FBMkI7SUFDL0IsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQUMsUUFBeUI7UUFDakQsV0FBVyxHQUFHLElBQUksY0FBYyxDQUFDLFVBQUMsT0FBTyxFQUFFLEdBQUc7WUFDNUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUNILFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNMLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFDbEIsR0FBRyxDQUFDO1FBQ0YsRUFBRSxFQUFFLENBQUM7SUFDUCxDQUFDLENBQUMsRUFDRixRQUFRLENBQUM7UUFDUCxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaWJlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCB0YXAsIGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEFuIG9ic2VydmFibGUgY3JlYXRvciBmb3IgZWxlbWVudCByZXNpemUuXG4gKiBAcGFyYW0gZWxtIHRoZSB3YXRjaCBlbGVtZW50LlxuICogQHBhcmFtIGNiIHdoZW4gcmVzaXplIGNvbXBsZXRlLCBjYWxsIGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0gdGltZSByZXNpemUgZW1pdCB0aW1lLCBkZWZhdWx0IGlzIDIwMFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzaXplT2JzZXJ2YWJsZShlbG06IEhUTUxFbGVtZW50LCBjYjogKCkgPT4gdm9pZCwgdGltZSA9IDIwMCk6IE9ic2VydmFibGU8YW55PiB7XG4gIGxldCBlbG1PYnNlcnZlJDogUmVzaXplT2JzZXJ2ZXI7XG4gIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IFN1YnNjcmliZXI8YW55PikgPT4ge1xuICAgIGVsbU9ic2VydmUkID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzLCBvYnMpID0+IHtcbiAgICAgIG9ic2VydmVyLm5leHQoZWxtT2JzZXJ2ZSQpO1xuICAgIH0pO1xuICAgIGVsbU9ic2VydmUkLm9ic2VydmUoZWxtKTtcbiAgfSkucGlwZShcbiAgICBkZWJvdW5jZVRpbWUodGltZSksXG4gICAgdGFwKCgpID0+IHtcbiAgICAgIGNiKCk7XG4gICAgfSksXG4gICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgZWxtT2JzZXJ2ZSQudW5vYnNlcnZlKGVsbSk7XG4gICAgICBlbG1PYnNlcnZlJC5kaXNjb25uZWN0KCk7XG4gICAgfSlcbiAgKTtcbn1cbiJdfQ==