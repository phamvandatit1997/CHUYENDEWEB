/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
var NgxHmCarouselDynamicDirective = /** @class */ (function () {
    function NgxHmCarouselDynamicDirective(_view, _template) {
        this._view = _view;
        this._template = _template;
        this.compelete = false;
        this._view.clear();
    }
    Object.defineProperty(NgxHmCarouselDynamicDirective.prototype, "currentI", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this.compelete) {
                /** @type {?} */
                var nextI = value + 1;
                /** @type {?} */
                var prevI = value - 1;
                if (this.index === 0 ||
                    this.index === this.length - 1 ||
                    this.index === nextI ||
                    this.index === prevI ||
                    this.index === value) {
                    this._view.createEmbeddedView(this._template);
                    this.compelete = true;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxHmCarouselDynamicDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    NgxHmCarouselDynamicDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxHmCarouselDynamic]'
                },] }
    ];
    /** @nocollapse */
    NgxHmCarouselDynamicDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef }
    ]; };
    NgxHmCarouselDynamicDirective.propDecorators = {
        index: [{ type: Input, args: ['ngxHmCarouselDynamic',] }],
        length: [{ type: Input, args: ['ngxHmCarouselDynamicLength',] }],
        currentI: [{ type: Input, args: ['ngxHmCarouselDynamicIndex',] }]
    };
    return NgxHmCarouselDynamicDirective;
}());
export { NgxHmCarouselDynamicDirective };
if (false) {
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.index;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.length;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype.compelete;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype._view;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype._template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhtLWNhcm91c2VsLWR5bmFtaWMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhtLWNhcm91c2VsLyIsInNvdXJjZXMiOlsibGliL25neC1obS1jYXJvdXNlbC1keW5hbWljLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhGO0lBNEJFLHVDQUNVLEtBQXVCLEVBQ3ZCLFNBQTJCO1FBRDNCLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBSDdCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFJeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBekJELHNCQUVJLG1EQUFROzs7OztRQUZaLFVBRWEsS0FBYTtZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTs7b0JBRWIsS0FBSyxHQUFHLEtBQUssR0FBRyxDQUFDOztvQkFDakIsS0FBSyxHQUFHLEtBQUssR0FBRyxDQUFDO2dCQUV2QixJQUNFLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQztvQkFDaEIsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7b0JBQzlCLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztvQkFDcEIsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLO29CQUNwQixJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtvQkFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2lCQUN2QjthQUNGO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7SUFTRCxnREFBUTs7O0lBQVI7SUFDQSxDQUFDOztnQkFuQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7aUJBQ25DOzs7O2dCQUorQyxnQkFBZ0I7Z0JBQTdCLFdBQVc7Ozt3QkFPM0MsS0FBSyxTQUFDLHNCQUFzQjt5QkFDNUIsS0FBSyxTQUFDLDRCQUE0QjsyQkFDbEMsS0FBSyxTQUFDLDJCQUEyQjs7SUE4QnBDLG9DQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FsQ1ksNkJBQTZCOzs7SUFFeEMsOENBQTZDOztJQUM3QywrQ0FBb0Q7Ozs7O0lBcUJwRCxrREFBMEI7Ozs7O0lBRXhCLDhDQUErQjs7Ozs7SUFDL0Isa0RBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4SG1DYXJvdXNlbER5bmFtaWNdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hIbUNhcm91c2VsRHluYW1pY0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCduZ3hIbUNhcm91c2VsRHluYW1pYycpIGluZGV4OiBudW1iZXI7XG4gIEBJbnB1dCgnbmd4SG1DYXJvdXNlbER5bmFtaWNMZW5ndGgnKSBsZW5ndGg6IG51bWJlcjtcbiAgQElucHV0KCduZ3hIbUNhcm91c2VsRHluYW1pY0luZGV4JylcblxuICBzZXQgY3VycmVudEkodmFsdWU6IG51bWJlcikge1xuICAgIGlmICghdGhpcy5jb21wZWxldGUpIHtcblxuICAgICAgY29uc3QgbmV4dEkgPSB2YWx1ZSArIDE7XG4gICAgICBjb25zdCBwcmV2SSA9IHZhbHVlIC0gMTtcblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmluZGV4ID09PSAwIHx8XG4gICAgICAgIHRoaXMuaW5kZXggPT09IHRoaXMubGVuZ3RoIC0gMSB8fFxuICAgICAgICB0aGlzLmluZGV4ID09PSBuZXh0SSB8fFxuICAgICAgICB0aGlzLmluZGV4ID09PSBwcmV2SSB8fFxuICAgICAgICB0aGlzLmluZGV4ID09PSB2YWx1ZSkge1xuICAgICAgICB0aGlzLl92aWV3LmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLl90ZW1wbGF0ZSk7XG4gICAgICAgIHRoaXMuY29tcGVsZXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbXBlbGV0ZSA9IGZhbHNlO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF92aWV3OiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgX3RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gICAgdGhpcy5fdmlldy5jbGVhcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gIH1cblxufVxuIl19