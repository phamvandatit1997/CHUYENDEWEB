var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
var OffClickDirective = /** @class */ (function () {
    function OffClickDirective(elementRef) {
        this.elementRef = elementRef;
        this.offClick = new EventEmitter();
    }
    OffClickDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.eventHandler = function ($event) {
            $event.stopPropagation();
            if (!_this.elementRef.nativeElement.contains($event.target)) {
                _this.offClick.emit(null);
            }
        };
        document.addEventListener('mouseup', this.eventHandler);
    };
    OffClickDirective.prototype.ngOnDestroy = function () {
        document.removeEventListener('mouseup', this.eventHandler);
    };
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], OffClickDirective.prototype, "offClick", void 0);
    OffClickDirective = __decorate([
        Directive({
            selector: '[offClick]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], OffClickDirective);
    return OffClickDirective;
}());
export { OffClickDirective };
//# sourceMappingURL=offclick.directive.js.map