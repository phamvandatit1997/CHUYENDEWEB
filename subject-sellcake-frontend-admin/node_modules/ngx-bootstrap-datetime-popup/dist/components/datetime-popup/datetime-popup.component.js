var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
var DatetimePopupComponent = /** @class */ (function () {
    function DatetimePopupComponent(elementRef) {
        this.elementRef = elementRef;
        this.appendTo = undefined;
        this.valueChange = new EventEmitter();
        this.showPopup = false;
        this.showPopupChange = new EventEmitter();
        this.showDate = true;
        this.showTime = true;
        this.showWeeks = false;
        this.showMeridian = false;
        this.showSeconds = false;
        this.datepickerMode = 'day';
        this.initDate = null;
        this.minDate = null;
        this.maxDate = null;
        this.dateDisabled = [];
        this.minuteStep = 5;
        this.hourStep = 1;
        this.secondsStep = 1;
        this.localValue = null;
        this.isOpening = false;
        this.isDropUp = false;
    }
    DatetimePopupComponent.prototype.ngOnChanges = function (changes) {
        if (!this.nowButton) {
            this.nowButton = { show: true, label: 'Now', cssClass: 'btn btn-secondary btn-sm' };
        }
        if (!this.clearButton) {
            this.clearButton = { show: true, label: 'Clear', cssClass: 'btn btn-secondary btn-sm' };
        }
        if (!this.closeButton) {
            this.closeButton = { show: true, label: 'Close', cssClass: 'btn btn-secondary btn-sm' };
        }
        // user maybe typing a value into an input box, so would come in as string
        if (typeof this.value === 'string') {
            // check if the string is a valid date
            if (!isNaN(new Date(this.value).getTime())) {
                this.localValue = new Date(this.value);
            }
        }
        else if (this.value) {
            this.localValue = this.value;
        }
        // toggle if open
        if (changes.showPopup && this.dropdown) {
            if (changes.showPopup.currentValue === true && this.dropdown.isOpen === false) {
                this.onWindowScroll();
                this.dropdown.show();
            }
            else if (changes.showPopup.currentValue === false && this.dropdown.isOpen === true) {
                this.dropdown.hide();
            }
        }
    };
    DatetimePopupComponent.prototype.onWindowScroll = function () {
        var nativeEl = this.elementRef.nativeElement;
        var clientRect = nativeEl.getBoundingClientRect();
        var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
        var offsetTop = clientRect.top + window.pageYOffset;
        var height = clientRect.height;
        var dropdownEl = nativeEl.children.item(0);
        var menuEl = dropdownEl.children.length > 0 ? dropdownEl.children.item(0) : null;
        var menuHeight = this.showDate && this.showTime ? 402 : this.showDate ? 300 : 102;
        if (menuEl != null) {
            // get the style
            var display = menuEl.style.display;
            menuEl.style.display = 'block';
            menuHeight = menuEl.getBoundingClientRect().height;
            menuEl.style.display = display;
        }
        this.isDropUp = ((offsetTop + height + menuHeight) > (scrollTop + document.documentElement.clientHeight));
    };
    DatetimePopupComponent.prototype.onOpenChange = function () {
        var _this = this;
        if (this.dropdown.isOpen === true) {
            this.isOpening = true;
            setTimeout(function () { return _this.isOpening = false; }, 250);
        }
    };
    DatetimePopupComponent.prototype.onHidden = function () {
        this.showPopup = false;
        this.showPopupChange.emit(false);
    };
    DatetimePopupComponent.prototype.onNow = function () {
        this.localValue = new Date();
        this.onPickerChange();
    };
    DatetimePopupComponent.prototype.onClear = function () {
        this.valueChange.emit(null);
    };
    DatetimePopupComponent.prototype.onClose = function () {
        this.showPopup = false;
        this.showPopupChange.emit(false);
    };
    DatetimePopupComponent.prototype.onPickerChange = function () {
        if (this.isOpening === true) {
            return;
        }
        this.valueChange.emit(this.localValue);
        if (this.showDate === true && this.showTime === false) {
            this.onHidden();
        }
    };
    __decorate([
        ViewChild('dropdown'),
        __metadata("design:type", BsDropdownDirective)
    ], DatetimePopupComponent.prototype, "dropdown", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DatetimePopupComponent.prototype, "appendTo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatetimePopupComponent.prototype, "value", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DatetimePopupComponent.prototype, "valueChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DatetimePopupComponent.prototype, "showPopup", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], DatetimePopupComponent.prototype, "showPopupChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DatetimePopupComponent.prototype, "showDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DatetimePopupComponent.prototype, "showTime", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DatetimePopupComponent.prototype, "showWeeks", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DatetimePopupComponent.prototype, "showMeridian", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DatetimePopupComponent.prototype, "showSeconds", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DatetimePopupComponent.prototype, "datepickerMode", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatetimePopupComponent.prototype, "initDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatetimePopupComponent.prototype, "minDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], DatetimePopupComponent.prototype, "maxDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], DatetimePopupComponent.prototype, "dateDisabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatetimePopupComponent.prototype, "nowButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatetimePopupComponent.prototype, "clearButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DatetimePopupComponent.prototype, "closeButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], DatetimePopupComponent.prototype, "minuteStep", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], DatetimePopupComponent.prototype, "hourStep", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], DatetimePopupComponent.prototype, "secondsStep", void 0);
    __decorate([
        HostListener('window:scroll', []),
        HostListener('window:resize', []),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DatetimePopupComponent.prototype, "onWindowScroll", null);
    DatetimePopupComponent = __decorate([
        Component({
            selector: 'datetime-popup',
            template: "\n    <div [container]=\"appendTo\" (isOpenChange)=\"onOpenChange()\" (onHidden)=\"onHidden()\" [dropup]=\"isDropUp\" dropdown #dropdown=\"bs-dropdown\">\n      <ul class=\"datetime-popup dropdown-menu\" role=\"menu\" (offClick)=\"onClose()\" [ngClass]=\"{ 'show': dropdown.isOpen === true, 'body-container': appendTo == 'body', 'dropdown': !isDropUp, 'dropup': isDropUp }\" *dropdownMenu>\n        <li class=\"my-2 mx-2\">\n          <datepicker *ngIf=\"showDate\"\n                      [(ngModel)]=\"localValue\"\n                      (ngModelChange)=\"onPickerChange()\"\n                      [showWeeks]=\"showWeeks\"\n                      [datepickerMode]=\"datepickerMode\"\n                      [minDate]=\"minDate\"\n                      [maxDate]=\"maxDate\"\n                      [dateDisabled]=\"dateDisabled\"></datepicker>\n          <timepicker *ngIf=\"showTime\"\n                      [(ngModel)]=\"localValue\"\n                      [min]=\"minDate\"\n                      [max]=\"maxDate\"\n                      [hourStep]=\"hourStep\"\n                      [minuteStep]=\"minuteStep\"\n                      [secondsStep]=\"secondsStep\"\n                      [showSeconds]=\"showSeconds\"\n                      [showMeridian]=\"showMeridian\"\n                      (ngModelChange)=\"onPickerChange()\"></timepicker>\n        </li>\n        <li class=\"mx-2 mb-2\">\n          <span class=\"btn-group pull-left\">\n              <button type=\"button\"\n                      (click)=\"onNow()\"\n                      *ngIf=\"nowButton.show\"\n                      [ngClass]=\"nowButton.cssClass\">{{ nowButton.label }}</button>\n              <button type=\"button\"\n                      (click)=\"onClear()\"\n                      *ngIf=\"clearButton.show\"\n                      [ngClass]=\"clearButton.cssClass\">{{ clearButton.label }}</button>\n          </span>\n          <span class=\"btn-group pull-right\">\n              <button type=\"button\"\n                      (click)=\"onClose()\"\n                      *ngIf=\"closeButton.show\"\n                      [ngClass]=\"closeButton.cssClass\">{{ closeButton.label }}</button>\n          </span>\n        </li>\n      </ul>\n    </div>\n  "
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], DatetimePopupComponent);
    return DatetimePopupComponent;
}());
export { DatetimePopupComponent };
//# sourceMappingURL=datetime-popup.component.js.map